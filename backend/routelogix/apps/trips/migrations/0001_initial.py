# Generated by Django 4.2.16 on 2025-10-15 05:27

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('planning', 'Planning'), ('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planning', max_length=20)),
                ('current_location', models.CharField(help_text='Starting location address', max_length=255)),
                ('current_lat', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('current_lng', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('pickup_location', models.CharField(help_text='Pickup location address', max_length=255)),
                ('pickup_lat', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('pickup_lng', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('dropoff_location', models.CharField(help_text='Dropoff location address', max_length=255)),
                ('dropoff_lat', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('dropoff_lng', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('total_distance', models.DecimalField(blank=True, decimal_places=2, help_text='Total distance in miles', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('estimated_duration', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated driving duration in hours', max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('cycle_type', models.CharField(choices=[('70_8', '70-hour/8-day cycle'), ('60_7', '60-hour/7-day cycle')], default='70_8', max_length=10)),
                ('planned_start_time', models.DateTimeField(blank=True, null=True)),
                ('actual_start_time', models.DateTimeField(blank=True, null=True)),
                ('estimated_completion', models.DateTimeField(blank=True, null=True)),
                ('actual_completion', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TripSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('average_speed_mph', models.PositiveIntegerField(default=65, help_text='Average driving speed in mph', validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(80)])),
                ('fuel_efficiency_mpg', models.DecimalField(decimal_places=2, default=6.5, help_text='Truck fuel efficiency in mpg', max_digits=5, validators=[django.core.validators.MinValueValidator(4.0), django.core.validators.MaxValueValidator(12.0)])),
                ('fuel_tank_capacity', models.PositiveIntegerField(default=300, help_text='Fuel tank capacity in gallons', validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(500)])),
                ('preferred_rest_duration', models.PositiveIntegerField(default=10, help_text='Preferred rest period duration in hours', validators=[django.core.validators.MinValueValidator(8), django.core.validators.MaxValueValidator(24)])),
                ('max_daily_driving', models.PositiveIntegerField(default=11, help_text='Maximum daily driving hours', validators=[django.core.validators.MinValueValidator(8), django.core.validators.MaxValueValidator(11)])),
                ('avoid_tolls', models.BooleanField(default=False)),
                ('avoid_highways', models.BooleanField(default=False)),
                ('hazmat_restrictions', models.BooleanField(default=False)),
                ('break_reminders', models.BooleanField(default=True)),
                ('hos_warnings', models.BooleanField(default=True)),
                ('fuel_stop_alerts', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('trip', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='trips.trip')),
            ],
        ),
        migrations.CreateModel(
            name='RouteStop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stop_type', models.CharField(choices=[('current', 'Current Location'), ('pickup', 'Pickup Location'), ('dropoff', 'Dropoff Location'), ('fuel', 'Fuel Stop'), ('rest', 'Rest Stop'), ('break', '30-min Break'), ('customs', 'Customs/Border'), ('weigh_station', 'Weigh Station')], max_length=20)),
                ('location', models.CharField(help_text='Stop location address or description', max_length=255)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('distance_from_start', models.DecimalField(decimal_places=2, help_text='Distance from trip start in miles', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('order', models.PositiveIntegerField(help_text='Order of stop in the route')),
                ('estimated_arrival', models.DateTimeField(blank=True, null=True)),
                ('actual_arrival', models.DateTimeField(blank=True, null=True)),
                ('estimated_departure', models.DateTimeField(blank=True, null=True)),
                ('actual_departure', models.DateTimeField(blank=True, null=True)),
                ('duration_minutes', models.PositiveIntegerField(default=0, help_text='Planned duration of stop in minutes', validators=[django.core.validators.MaxValueValidator(1440)])),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this stop')),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this stop is mandatory for HOS compliance')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='route_stops', to='trips.trip')),
            ],
            options={
                'ordering': ['trip', 'order'],
            },
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['user', '-created_at'], name='trips_trip_user_id_2f4a85_idx'),
        ),
        migrations.AddIndex(
            model_name='trip',
            index=models.Index(fields=['status', '-created_at'], name='trips_trip_status_acbeb3_idx'),
        ),
        migrations.AddIndex(
            model_name='routestop',
            index=models.Index(fields=['trip', 'order'], name='trips_route_trip_id_c93825_idx'),
        ),
        migrations.AddIndex(
            model_name='routestop',
            index=models.Index(fields=['trip', 'stop_type'], name='trips_route_trip_id_260292_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='routestop',
            unique_together={('trip', 'order')},
        ),
    ]
