# Generated by Django 4.2.16 on 2025-10-15 05:27

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('trips', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DailyLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('log_date', models.DateField(help_text='The date this log covers (24-hour period)')),
                ('total_driving_time', models.PositiveIntegerField(default=0, help_text='Total driving time in minutes', validators=[django.core.validators.MaxValueValidator(660)])),
                ('total_on_duty_time', models.PositiveIntegerField(default=0, help_text='Total on-duty time in minutes', validators=[django.core.validators.MaxValueValidator(840)])),
                ('total_sleeper_time', models.PositiveIntegerField(default=0, help_text='Total sleeper berth time in minutes', validators=[django.core.validators.MaxValueValidator(1440)])),
                ('total_off_duty_time', models.PositiveIntegerField(default=0, help_text='Total off-duty time in minutes', validators=[django.core.validators.MaxValueValidator(1440)])),
                ('cycle_hours_used', models.DecimalField(decimal_places=2, default=0, help_text='Cumulative cycle hours used', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(84)])),
                ('is_complete', models.BooleanField(default=False, help_text='Whether this daily log is complete')),
                ('has_violations', models.BooleanField(default=False, help_text='Whether this log has HOS violations')),
                ('is_locked', models.BooleanField(default=False, help_text='Whether this log is locked from editing')),
                ('driver_signature', models.CharField(blank=True, help_text='Digital signature', max_length=100)),
                ('certified_at', models.DateTimeField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True, help_text='Driver remarks for this day')),
                ('odometer_start', models.PositiveIntegerField(blank=True, help_text='Starting odometer reading', null=True)),
                ('odometer_end', models.PositiveIntegerField(blank=True, help_text='Ending odometer reading', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_logs', to='trips.trip')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['trip', 'log_date'],
            },
        ),
        migrations.CreateModel(
            name='LogGrid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grid_slots', models.PositiveIntegerField(default=96, help_text='Number of grid slots (96 = 15-min intervals)')),
                ('minutes_per_slot', models.PositiveIntegerField(default=15, help_text='Minutes each slot represents')),
                ('grid_data', models.TextField(help_text='Comma-separated duty status for each time slot')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('daily_log', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='grid', to='eld.dailylog')),
            ],
            options={
                'indexes': [models.Index(fields=['daily_log'], name='eld_loggrid_daily_l_945804_idx')],
            },
        ),
        migrations.CreateModel(
            name='LogEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('off_duty', 'Off Duty'), ('sleeper', 'Sleeper Berth'), ('driving', 'Driving'), ('on_duty', 'On Duty (Not Driving)')], max_length=20)),
                ('start_time', models.TimeField(help_text='Start time for this duty status')),
                ('end_time', models.TimeField(help_text='End time for this duty status')),
                ('duration_minutes', models.PositiveIntegerField(help_text='Duration of this entry in minutes', validators=[django.core.validators.MaxValueValidator(1440)])),
                ('location', models.CharField(blank=True, help_text='Location where status change occurred', max_length=255)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('remarks', models.TextField(blank=True, help_text='Driver remarks for this entry')),
                ('odometer', models.PositiveIntegerField(blank=True, help_text='Odometer reading', null=True)),
                ('is_automatic', models.BooleanField(default=True, help_text='Whether this entry was auto-generated')),
                ('is_edited', models.BooleanField(default=False, help_text='Whether this entry has been manually edited')),
                ('edit_reason', models.CharField(blank=True, help_text='Reason for manual edit', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('daily_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='eld.dailylog')),
            ],
            options={
                'ordering': ['daily_log', 'start_time'],
                'indexes': [models.Index(fields=['daily_log', 'start_time'], name='eld_logentr_daily_l_b79e80_idx'), models.Index(fields=['status', 'start_time'], name='eld_logentr_status_7efe68_idx')],
            },
        ),
        migrations.CreateModel(
            name='HOSViolation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('violation_type', models.CharField(choices=[('daily_driving_limit', 'Daily Driving Limit Exceeded'), ('duty_window_limit', 'Daily Duty Window Exceeded'), ('break_requirement', '30-Minute Break Requirement Not Met'), ('rest_period_insufficient', 'Insufficient Rest Period'), ('cycle_limit_exceeded', 'Cycle Hour Limit Exceeded'), ('no_restart', '34-Hour Restart Required'), ('sleeper_berth_invalid', 'Invalid Sleeper Berth Period'), ('sleeper_berth_combination', 'Invalid Sleeper Berth Combination'), ('missing_entries', 'Missing Log Entries'), ('overlapping_entries', 'Overlapping Log Entries'), ('invalid_time_sequence', 'Invalid Time Sequence')], max_length=50)),
                ('description', models.TextField(help_text='Detailed description of the violation')),
                ('severity', models.CharField(choices=[('warning', 'Warning'), ('violation', 'Violation'), ('critical', 'Critical')], default='violation', max_length=20)),
                ('violation_time', models.TimeField(blank=True, help_text='Time when violation occurred', null=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes on how violation was resolved')),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('daily_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='violations', to='eld.dailylog')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['daily_log', 'severity', 'created_at'],
                'indexes': [models.Index(fields=['daily_log', 'violation_type'], name='eld_hosviol_daily_l_33ae61_idx'), models.Index(fields=['severity', 'is_resolved'], name='eld_hosviol_severit_52881f_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='dailylog',
            index=models.Index(fields=['trip', 'log_date'], name='eld_dailylo_trip_id_93ed6d_idx'),
        ),
        migrations.AddIndex(
            model_name='dailylog',
            index=models.Index(fields=['user', 'log_date'], name='eld_dailylo_user_id_0bf129_idx'),
        ),
        migrations.AddIndex(
            model_name='dailylog',
            index=models.Index(fields=['has_violations'], name='eld_dailylo_has_vio_91160a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dailylog',
            unique_together={('trip', 'log_date')},
        ),
    ]
